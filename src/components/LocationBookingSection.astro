---
interface Props {
  location: {
    name: string;
    slug: string;
  };
  eventTypes: {
    name: string;
    calLink: string;
    type: 'primary' | 'secondary';
  }[];
}

const { location, eventTypes } = Astro.props;
---

<div class="border-2 border-gray-200 rounded-lg p-4">
  <h4 class="font-semibold mb-2">{location.name}</h4>
  <div class="space-y-2">
    {
      eventTypes.map((event) => (
        <button
          class={`w-full ${event.type === 'primary' ? 'btn-primary' : 'btn-secondary'} cal-booking-btn relative group`}
          data-cal-link={event.calLink}
          data-cal-config='{"layout":"month_view"}'
          type="button">
          <span class="flex items-center justify-between">
            <span>{event.name}</span>
            <svg
              class="w-4 h-4 opacity-60 group-hover:opacity-80 transition-opacity cal-external-icon hidden"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24">
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"
              />
            </svg>
          </span>
        </button>
      ))
    }
  </div>
</div>

<script>
  // Handle Cal.com booking button clicks
  document.addEventListener('DOMContentLoaded', function () {
    let calReady = false;
    let calInitialized = false;

    // Check if Cal is already available and functional
    function isCalAvailable() {
      try {
        return (
          typeof (window as any).Cal !== 'undefined' &&
          typeof (window as any).Cal === 'function' &&
          (window as any).Cal.ns &&
          typeof (window as any).Cal.ns === 'object'
        );
      } catch (error) {
        return false;
      }
    }

    // Show external link icons when using fallback
    function showFallbackMode() {
      const externalIcons = document.querySelectorAll('.cal-external-icon');
      externalIcons.forEach((icon) => {
        icon.classList.remove('hidden');
      });
      console.log('📍 Booking buttons will open Cal.com in new tabs');
    }

    // Initial check
    if (isCalAvailable()) {
      calReady = true;
    }

    // Listen for Cal ready event
    window.addEventListener('cal-ready', function () {
      calReady = true;
      console.log('Cal.com is now ready for booking buttons');
      if (!calInitialized) {
        initializeCalButtons();
        calInitialized = true;
      }
    });

    // Listen for Cal error event
    window.addEventListener('cal-error', function () {
      console.warn('Cal.com embed failed to load, will use fallback links');
      calReady = false;
      showFallbackMode();
    });

    // Initialize booking buttons
    function initializeCalButtons() {
      const buttons = document.querySelectorAll('.cal-booking-btn');

      buttons.forEach((button) => {
        // Remove any existing listeners to prevent duplicates
        const newButton = button.cloneNode(true) as HTMLButtonElement;
        button.parentNode?.replaceChild(newButton, button);

        newButton.addEventListener('click', function (e: Event) {
          e.preventDefault();

          const target = e.target as HTMLButtonElement;
          const calLink = target.getAttribute('data-cal-link');
          const calConfig = target.getAttribute('data-cal-config');

          if (calLink) {
            console.log('Booking button clicked:', calLink);

            // Check if Cal.com is available and functional
            if (calReady && isCalAvailable()) {
              try {
                console.log('Opening Cal.com modal');
                // Use Cal.com embed API
                (window as any).Cal('openModal', {
                  calLink: calLink,
                  config: calConfig ? JSON.parse(calConfig) : {},
                });
              } catch (error) {
                console.warn('Failed to open Cal.com modal:', error);
                // Fallback to new tab
                window.open(`https://cal.com/${calLink}`, '_blank');
              }
            } else {
              // Fallback: open Cal.com in new tab
              console.log('Cal.com embed not available, opening in new tab');
              window.open(`https://cal.com/${calLink}`, '_blank');
            }
          }
        });
      });
    }

    // Initialize immediately if Cal is already ready
    if (calReady) {
      initializeCalButtons();
      calInitialized = true;
    }

    // Initialize buttons even if Cal.com isn't ready (for fallback behavior)
    if (!calInitialized) {
      initializeCalButtons();
      calInitialized = true;
    }

    // Show fallback mode immediately if we're in development
    const isDevelopment =
      window.location.hostname === 'localhost' ||
      window.location.hostname === '127.0.0.1';
    if (isDevelopment) {
      setTimeout(showFallbackMode, 100);
    }
  });
</script>
