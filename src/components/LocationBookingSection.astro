---
interface Props {
  location: {
    name: string;
    slug: string;
  };
  eventTypes: {
    name: string;
    calLink: string;
    type: 'primary' | 'secondary';
  }[];
}

const { location, eventTypes } = Astro.props;
---

<div class="border-2 border-gray-200 rounded-lg p-4">
  <h4 class="font-semibold mb-2">{location.name}</h4>
  <div class="space-y-2">
    {
      eventTypes.map((event) => (
        <button
          class={`w-full ${event.type === 'primary' ? 'btn-primary' : 'btn-secondary'} cal-booking-btn relative group`}
          data-cal-link={event.calLink}
          data-cal-config='{"layout":"month_view"}'
          type="button">
          <span class="flex items-center justify-between">
            <span>{event.name}</span>
            <svg
              class="w-4 h-4 opacity-60 group-hover:opacity-80 transition-opacity cal-external-icon hidden"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24">
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"
              />
            </svg>
          </span>
        </button>
      ))
    }
  </div>
</div>

<script>
  // No custom JavaScript needed - Cal.com handles everything natively
  // The booking buttons will work automatically with their data attributes
  console.log(
    'LocationBookingSection loaded - Cal.com will handle booking interactions natively',
  );
</script>
